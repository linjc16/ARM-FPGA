
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Advanced_Nios(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	KEY,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// LCD //////////
	LCD_BLON,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,

	//////////// PS2 for Keyboard and Mouse //////////
	PS2_CLK,
	PS2_CLK2,
	PS2_DAT,
	PS2_DAT2,

	//////////// SDCARD //////////
	SD_CLK,
	SD_CMD,
	SD_DAT,
	SD_WP_N,

	//////////// Audio //////////
	AUD_ADCDAT,
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACDAT,
	AUD_DACLRCK,
	AUD_XCK,

	//////////// I2C for EEPROM //////////
	EEP_I2C_SCLK,
	EEP_I2C_SDAT,

	//////////// I2C for Audio  //////////
	I2C_SCLK,
	I2C_SDAT,

	//////////// IR Receiver //////////
	IRDA_RXD,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// Flash //////////
	FL_ADDR,
	FL_CE_N,
	FL_DQ,
	FL_OE_N,
	FL_RST_N,
	FL_RY,
	FL_WE_N,
	FL_WP_N 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// SEG7 //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;

//////////// LCD //////////
output		          		LCD_BLON;
inout 		     [7:0]		LCD_DATA;
output		          		LCD_EN;
output		          		LCD_ON;
output		          		LCD_RS;
output		          		LCD_RW;

//////////// PS2 for Keyboard and Mouse //////////
inout 		          		PS2_CLK;
inout 		          		PS2_CLK2;
inout 		          		PS2_DAT;
inout 		          		PS2_DAT2;

//////////// SDCARD //////////
output		          		SD_CLK;
inout 		          		SD_CMD;
inout 		     [3:0]		SD_DAT;
input 		          		SD_WP_N;

//////////// Audio //////////
input 		          		AUD_ADCDAT;
inout 		          		AUD_ADCLRCK;
inout 		          		AUD_BCLK;
output		          		AUD_DACDAT;
inout 		          		AUD_DACLRCK;
output		          		AUD_XCK;

//////////// I2C for EEPROM //////////
output		          		EEP_I2C_SCLK;
inout 		          		EEP_I2C_SDAT;

//////////// I2C for Audio  //////////
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;

//////////// IR Receiver //////////
input 		          		IRDA_RXD;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [31:0]		DRAM_DQ;
output		     [3:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// Flash //////////
output		    [22:0]		FL_ADDR;
output		          		FL_CE_N;
inout 		     [7:0]		FL_DQ;
output		          		FL_OE_N;
output		          		FL_RST_N;
input 		          		FL_RY;
output		          		FL_WE_N;
output		          		FL_WP_N;


//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================
/*reg [19:0]		Cont;
reg				Reset_N;
always@(posedge CLOCK_50)	begin
	if(Cont != 20'hFFFFF) begin
		Cont <= Cont + 1;
		Reset_N <= 1'b0;
	end
	else Reset_N <= 1'b1;
end*/
wire 								Clk_Core;
wire								Clk_Sdram;
assign							DRAM_CLK = Clk_Sdram;
wire								Lock;
wire			[63:0]			DIG_LINE;
PLL1	PLL1_inst (
	.inclk0 ( CLOCK_50 ),
	.c0 ( Clk_Core ),  //Phrase 0   degree 100Mhz
	.c1 ( Clk_Sdram ),  //Phrase -72 degree 100Mhz
	.locked ( Lock )
	);

kernel u0 (
    .clk_clk                                  (Clk_Core),                                  //                          clk.clk
    .ir1498_0_conduit_end_0_export 				 (IRDA_RXD),
	 .lcd1602_demo_0_conduit_end_0_export_data (LCD_DATA), // lcd1602_demo_0_conduit_end_0.export_data
    .lcd1602_demo_0_conduit_end_0_export_rw   (LCD_RW),   //                             .export_rw
    .lcd1602_demo_0_conduit_end_0_export_en   (LCD_EN),   //                             .export_en
    .lcd1602_demo_0_conduit_end_0_export_rs   (LCD_RS),   //                             .export_rs
    .lcd1602_demo_0_conduit_end_0_export_blon (LCD_BLON), //                             .export_blon
    .lcd1602_demo_0_conduit_end_0_export_on   (LCD_ON),   //                             .export_on
    .new_sdram_controller_0_wire_addr         (DRAM_ADDR),         //  new_sdram_controller_0_wire.addr
    .new_sdram_controller_0_wire_ba           (DRAM_BA),           //                             .ba
    .new_sdram_controller_0_wire_cas_n        (DRAM_CAS_N),        //                             .cas_n
    .new_sdram_controller_0_wire_cke          (DRAM_CKE),          //                             .cke
    .new_sdram_controller_0_wire_cs_n         (DRAM_CS_N),         //                             .cs_n
    .new_sdram_controller_0_wire_dq           (DRAM_DQ),           //                             .dq
    .new_sdram_controller_0_wire_dqm          (DRAM_DQM),          //                             .dqm
    .new_sdram_controller_0_wire_ras_n        (DRAM_RAS_N),        //                             .ras_n
    .new_sdram_controller_0_wire_we_n         (DRAM_WE_N),         //                             .we_n
    .reset_reset_n                            (Lock),                           //                        reset.reset_n
	 .seg7_demo_0_conduit_end_0_export         (DIG_LINE)          //    seg7_demo_0_conduit_end_0.export
);


SEG7_LUT_8 SEG7_LUT_8_inst(.oSEG0(HEX0),.oSEG1(HEX1),.oSEG2(HEX2),.oSEG3(HEX3),.oSEG4(HEX4),.oSEG5(HEX5),.oSEG6(HEX6),.oSEG7(HEX7),.iDIG(DIG_LINE));
endmodule
